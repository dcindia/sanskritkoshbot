"""Deals with telegram interaction and meaning processing"""
import logging
import urllib.parse
from telegram import Update, MessageEntity
from telegram import InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import CommandHandler, CallbackContext, MessageHandler, Filters, InlineQueryHandler
from indic_transliteration import sanscript, detect
from htmldom import HtmlDom
import scraper as sc

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

RAW_URL = "http://kosha.sanskrit.today/word/"

CONFIGURATION = [['sp', 'sh', 'mw', 'hindi', 'apte', 'wilson', 'yates'],  # short names
                 ['Spoken Sanskrit', 'Shabda Sagara', 'Monier Williams Cologne', 'Hindi', 'Apte', 'Wilson', 'Yates'],  # names
                 [sc.spoken_sanskrit, sc.shabda_sagara, sc.monier_wiliams, sc.hindi_dict, sc.apte, sc.wilson, sc.yates]]  # funtions


def config(operation, value=None):

    def dicts(*args):
        return CONFIGURATION[1]

    def name(short_name):
        index = CONFIGURATION[0].index(short_name)
        return CONFIGURATION[1][index]

    def function(name):
        index = CONFIGURATION[1].index(name)
        return CONFIGURATION[2][index]

    mapping = {"dicts": dicts, "name": name, "function": function}

    return mapping[operation](value)


def fetch_meaning(word, preference=None):
    print("**************************************************************************")
    print("Searched for:", word)

    word = str.lower(word)
    if detect.detect(word) == sanscript.DEVANAGARI:
        # replaces anusvara with corresponding pancham varna
        word = sanscript.SCHEMES[sanscript.DEVANAGARI].fix_lazy_anusvaara(word, omit_sam=True, omit_yrl=True)
    transformed_word = urllib.parse.quote(word)  # remove html tags present, if any
    url = RAW_URL + transformed_word

    dom = HtmlDom(url).createDom()

    extracted_parts = dom.find("section#word div.card-header")
    available_dict = {}

    for part in extracted_parts:
        service = part.find("h5").text()

        if service in available_dict.keys():
            continue
        elif service not in config("dicts"):
            continue
        else:
            available_dict[service] = config("function", service)(word, part)

    else:

        if not available_dict:
            return None, "рдХреЛрдИ рдмреЗрд╣рддрд░ рдЕрд░реНрде рдирд╣реАрдВ рдкрд╛рдпрд╛ред"
        else:
            if preference == "All":   # for inline mode
                return available_dict
            if preference is not None and preference in available_dict.keys():  # if preference set and available also
                return available_dict[preference]
            else:  # if preference not found or not set at all
                for dict in config("dicts"):
                    if dict in available_dict.keys():
                        return available_dict[dict]


def on_start(update: Update, context: CallbackContext) -> None:
    help_message = f"""
<i>рдирдорд╕реНрдХрд╛рд░ {update.effective_user.first_name} ЁЯЩП</i>
рд╕рдВрд╕реНрдХреГрдд рд╢рдмреНрдж рдХрд╛ рдорддрд▓рдм рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдк рдХреЗрд╡рд▓ рдЕрдкрдирд╛ рд╢рдмреНрдж рд▓рд┐рдЦрдХрд░ рдореБрдЭреЗ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ рдпрд╛ <code>\"/arth &lt;рд╢рдмреНрдж&gt;\"</code> рдХрд╛ рдЙрдкрдпреЛрдЧ рднреА рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

рд╢рдмреНрджрдХреЛрд╖ рдХреЛ рдЙрдкрд▓рдмреНрдзрд┐ рдФрд░ рдЙрдкрдпреЛрдЧрд┐рддрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЪреБрдирд╛ рдЬрд╛рддрд╛ рд╣реИред рдЕрдЧрд░ рдЖрдкрдХреЛ рдЕрдкрдиреЗ рдкрд╕рдВрджреАрджрд╛ рд╢рдмреНрджрдХреЛрд╖ рд╕реЗ рдЕрд░реНрде рдЬрд╛рдирдирд╛ рд╣реИ рддреЛ рдЖрдк <code>\"/&lt;lang_id&gt;&lt;рд╢рдмреНрдж&gt;\"</code> рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
рдЙрджрд╛рд╣рд░рдг : \"<code>/sh рдХреГрддрд┐</code>\"
рд╕рднреА рд╢рдмреНрджрдХреЛрд╢реЛрдВ рдХреА рд╕реВрдЪрд┐ рдХреЗ рд▓рд┐рдП /kosha рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред

рдЖрдк рдЗрд╕реЗ рд╕реАрдзреЗ рдХрд┐рд╕реА рднреА рд╕рдореВрд╣ рдпрд╛ рдирд┐рдЬреА рд╕рдВрджреЗрд╢ рдореЗрдВ рднреА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдЯрд╛рдЗрдкрд┐рдВрдЧ рдмреЙрдХреНрд╕ рдореЗрдВ рдореЗрд░рд╛ рд╣реИрдВрдбрд▓ рд▓рд┐рдЦрдХрд░ рдЕрдкрдирд╛ рд╢рдмреНрдж рд▓рд┐рдЦрдирд╛ рд╣реЛрдЧрд╛ред
рдЬреИрд╕реЗ \"<code>@sanskritkoshbot рдХреГрддрд┐</code>\"
рдЗрддрдирд╛ рд▓рд┐рдЦрдиреЗ рдорд╛рддреНрд░ рдкрд░ рдЖрдкрдХреЗ рд╢рдмреНрдж рдХрд╛ рдЕрд░реНрде рдХреБрдЫ рдХреНрд╖рдгреЛрдВ рдХреЗ рдЕрдВрджрд░ рд╕рдиреНрджреЗрд╢ рдХреЗ рдКрдкрд░ рджрд┐рдЦрд╛ рджрд┐рдпрд╛ рдЬрд╛рдпреЗрдЧрд╛ред

рд╕рд╣рд╛рдпрддрд╛ рд╕рдВрджреЗрд╢ рдХреЛ рдкреЭрдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдк /help рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
"""
    update.message.reply_html(help_message)


def kosha_list(update: Update, context: CallbackContext) -> None:
    message = "<b>рд╢рдмреНрджрдХреЛрд╢реЛрдВ рдХреА рд╕реВрдЪрд┐:</b>\n\n"
    sets = zip(CONFIGURATION[0], CONFIGURATION[1])
    for count, set in enumerate(sets, start=1):
        message += f"{count}. {set[0]} - {set[1]}\n"

    update.message.reply_html(message)


def get_meaning(update: Update, context: CallbackContext) -> None:

    search_term = update.message.text
    preference = None

    if context.args == []:
        update.message.reply_text("рдХреГрдкрдпрд╛, рдореБрдЭреЗ рдХреЛрдИ рд╢рдмреНрдж рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")
        return

    if update.message.entities and update.message.entities[0].type == MessageEntity.BOT_COMMAND:
        command = update.message.text[1: update.message.entities[0].length].split('@')[0]
        search_term = " ".join(context.args)
        if not command.startswith("arth"):
            preference = config("name", command)

    answer, source = fetch_meaning(search_term, preference)
    if answer is None:
        answer_html = source
    else:
        answer_html = ''.join(answer) + "\n" + f"<i><u>ЁЯУЦ {source}</u></i>"
    update.message.reply_html(answer_html)


def get_meaning_inline(update: Update, context: CallbackContext) -> None:
    query = update.inline_query.query
    if not query:
        return
    results = list()
    _answer = fetch_meaning(query, preference="All")

    if str(type(_answer)) == "<class 'dict'>":  # meaning.fetch() returns dict if preference set to "All" and atleast one meaning found
        for service in _answer.keys():
            id = service
            title = service
            description = "".join(_answer[service][0][1:3])  # for particular dict, first part is anwer_list
            source = _answer[service][1]
            message = InputTextMessageContent(''.join(_answer[service][0]) + "\n" + f"<i><u>ЁЯУЦ {source}</u></i>", parse_mode="HTML")
            results.append(InlineQueryResultArticle(id=id, title=title, description=description, input_message_content=message))

    else:  # meaning.fetch() returns tuple if there is an error
        results.append(InlineQueryResultArticle(id="none", title=_answer[1], input_message_content=InputTextMessageContent(_answer[1])))

    context.bot.answer_inline_query(update.inline_query.id, results)


def unknown(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("рдорд╛реЮ рдХреАрдЬрд┐рдпреЗ ! рдЖрдкрдХреА рдорд╛рдВрдЧ рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдИред")


def set_handlers(dispatcher):
    dispatcher.add_handler(CommandHandler(['start', 'help'], on_start))
    dispatcher.add_handler(CommandHandler(['kosha'], kosha_list))
    dispatcher.add_handler(CommandHandler(['arth', 'sh', 'sp', 'hi', 'apte', 'wilson', 'mw', 'yates'], get_meaning))
    dispatcher.add_handler(MessageHandler(Filters.text & ~(Filters.via_bot(allow_empty=True) | Filters.command), get_meaning))
    dispatcher.add_handler(MessageHandler(Filters.command & ~Filters.chat_type.groups, unknown))
    dispatcher.add_handler(InlineQueryHandler(get_meaning_inline))
